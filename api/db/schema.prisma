datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model UserExample {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model AnimationHistory {
  id                Int         @id @default(autoincrement())
  name              String
  description       String?
  uuid              String      @unique
  revisions         Animation[] @relation("revisions")
  currentRevisionId Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  forkedFromId      Int?
}

model Animation {
  id                        Int                       @id @default(autoincrement())
  name                      String
  description               String?
  uuid                      String                    @unique @default(uuid())
  animationHistoryId        Int
  AnimationHistory          AnimationHistory          @relation("revisions", fields: [animationHistoryId], references: [id])
  version                   Int
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  tracks                    AnimationTrack[]
  AnimationRevisionEntities AnimationRevisionEntity[]
}

model AnimationTrack {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  uuid        String    @unique @default(uuid())
  revisionId  Int
  revision    Animation @relation(fields: [revisionId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sortNumber  Int
  color       String?

  AnimationTrackClips AnimationTrackClip[]
}

model AnimationTrackClip {
  id      Int            @id @default(autoincrement())
  uuid    String         @unique @default(uuid())
  trackId Int
  track   AnimationTrack @relation(fields: [trackId], references: [id])
  start   Int

  AnimationTrackKeyframes AnimationTrackKeyframe[]
}

model AnimationTrackKeyframe {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  sort                 Int
  duration             Int
  css                  String
  style                String
  html                 String
  AnimationTrackClip   AnimationTrackClip? @relation(fields: [animationTrackClipId], references: [id])
  animationTrackClipId Int?
}

model AnimationRevisionEntity {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  uuid        String    @unique @default(uuid())
  revisionId  Int
  revision    Animation @relation(fields: [revisionId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  image       String
  css         String
  style       String
  html        String
}
