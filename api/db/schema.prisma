datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model UserExample {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model AnimationHistory {
  id                String      @id @unique @default(uuid())
  name              String
  description       String?
  revisions         Animation[] @relation("revisions")
  currentRevisionId Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  forkedFromId      Int?
}

model Animation {
  id                 Int               @id @default(autoincrement())
  name               String
  description        String?
  uuid               String            @unique @default(uuid())
  animationHistoryId String
  AnimationHistory   AnimationHistory  @relation("revisions", fields: [animationHistoryId], references: [id])
  version            Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tracks             AnimationTrack[]
  entities           AnimationEntity[]
}

model AnimationTrack {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  uuid        String    @unique @default(uuid())
  revisionId  Int
  revision    Animation @relation(fields: [revisionId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sortNumber  Int
  color       String?

  clips AnimationTrackClip[]
}

model AnimationEntity {
  id          Int                  @id @default(autoincrement())
  name        String
  description String?
  uuid        String               @unique @default(uuid())
  revisionId  Int
  revision    Animation            @relation(fields: [revisionId], references: [id])
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  image       String
  html        String
  css         String
  clip        AnimationTrackClip[]
}

model AnimationTrackClip {
  id                Int             @id @default(autoincrement())
  uuid              String          @unique @default(uuid())
  start             Int
  animationTrackId  Int
  track             AnimationTrack  @relation(fields: [animationTrackId], references: [id])
  animationEntityId Int
  entity            AnimationEntity @relation(fields: [animationEntityId], references: [id])

  keyframes AnimationTrackKeyframe[]
}

model AnimationTrackKeyframe {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  sort                 Int
  duration             Int
  css                  String
  animationTrackClipId Int?
  clip                 AnimationTrackClip? @relation(fields: [animationTrackClipId], references: [id])
}
